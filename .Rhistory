month06 <- subset(quizdata, (quizdata$Month==6))
View(month06)
mean(month06$Temp)
monthmay <- subset(quizdata, (quizdata$Month==5))
max(monthmay$Ozone)
badmonthmay <- is.na(monthmay)
monthmay[!badmonthmay]
mayok <- monthmay[!badmonthmay]
max(monthmay$Ozone[!badmonthmay])
View(monthmay)
View(monthmay)
goodmay <- complete.cases(monthmay)
monthmay [monthmay,]
monthmay [goodmay,]
final <- data(monthmay [goodmay,])
install.packages("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z * 2 + 1000
my_div
info()
main()
nxt()
bye()
swirl()
swirl()
install_course_zip(file.choose(),multi = TRUE, which_course = "R Programming")
swirl()
swirl()
swirl()
library(swirl)
ls
rm(list=ls())
swirl()
swirl()
swirl()
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files())
arg(list.files)
args(list.files)
old.dir <- getwd()
args(dir.create)
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
list.files("mytest.R")
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("folder1","folder2")
?dir.create
dir.create(file.path(dir.create("testdir3")), "testdir2")
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
?unlink
unlink("testdir2",recursive = TRUE)
setwd(old.dir)
unlink('testdir', recursive = TRUE)
swirl()
1:20
pi:20
pi:10
15:1
`:`
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq <- seq(5,10, length = 30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0,40)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect<1
tf
newvb <- num_vect >= 6
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char," ")
paste(my_char, collapse = " ")
my_name <= c(my_char,"Leonardo")
my_name <- c(my_char,"Leonardo")
my_name
paste(my_name, collapse = " ")
paste("Hello","world!", sep = " ")
paste(1:3,c("X","Y","Z"),sep = "")
paste(LETTERS,1:4, sep = "-")
swirl()
x <- c(44,NA,5,NA)
x*3
y <- rnorm(1000)
z <- (NA,1000)
z <- rep(NA,1000)
-- my_data <- sample(c(y,z),100)
my_data <- sample(c(y, z), 100)
is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
swirl()
swirl()
rm(list = ls())
x
exit()
bye()
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
name(vect)
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
swirl
swirl()
my_vector <- c(1:20)
rm(list=ls())
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20,nrow = 4, ncol = 5)
identical(my_matrix,my_matrix2)
patients -> c("Bill","Gina","Kelly","Sean")
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
?colnames
colnames(cnames, my_data)
colnames(my_matrix) <- cnames
colnames(my_matrix)
colnames(my_data) <- cnames
my_data
swirl()
swirl()
rm(list = ls())
add2 <- function(x,y){
x+y
}
add2(3,5)
above <- function(x,n){
use <- x>n
x[use]
}
x <- 1:20
above(x,12)
above <- function( n = 10){
use <- x>n
x[use]
}
above(x)
above <- function( x, n = 10){
use <- x>n
x[use]
}
above(x)
above(x,15)
columnmean <- function(y){
nc <= ncol(y)
means <- numeric(nc) ##vector with 'nc' number of means
for(i in 1:nc){
means[i] <- mean(y[,i])
}
means ##last expression in the function, so that's what will be returned
}
columnmean(airquality)
columnmean <- function(y){
nc <- ncol(y)
means <- numeric(nc) ##vector with 'nc' number of means
for(i in 1:nc){
means[i] <- mean(y[,i])
}
means ##last expression in the function, so that's what will be returned
}
columnmean(airquality)
?mean
columnmean <- function(y, removeNA = TRUE){
nc <- ncol(y)
means <- numeric(nc) ##vector with 'nc' number of means
for(i in 1:nc){
means[i] <- mean(y[,i], na.rm = removeNA)
}
means ##last expression in the function, so that's what will be returned
}
columnmean(airquality)
columnmean(airquality, FALSE)
search()
d
?unclass
?names
swirl()
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 != 7
!(5 == 7)
FALSE && FALSE
FALSE & FALSE
TRUe & c(T,F,F)
TRUE & c(T,F,F)
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE,FALSE,FALSe)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins','twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
?which
which(c(TRUe))
which(c(TRUE))
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
swirl()
rm(list=ls())
library(swirl)
swirl()
swirl()
options(editor = "internal")
library(swirl)
swirl()
submit()
boring_function('My first function!')
boring_function()
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
View(remainder)
remainder(4, div=2)
View(boring_function)
View(remainder)
remainder(4,3)
args(remainder)
submit()
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){c[1]},x)
evaluate(function(x){c[[1]},x)
evaluate(function(x){[1]},c(8,4,0))
evaluate(function(x){c1]},c(8,4,0))
evaluate(function(x){c[1]},c(8,4,0))
evaluate(function(x){a[1]},a <- c(8,4,0))
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming","is","fun!")
submit()
telegram("Olá, quanto tempo! Mande mensagens para a avó.")
submit()
submit()
submit()
mad_libs(place = "Shopping", adjective = "Beautiful", noun = "José")
submit()
"i"
"I"%p%"love"
"I"%p%"love"%p%"R!"
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
month(d1)
months(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(),t1,units = 'days')
cube(3)
cube <- function(x,n){
x^3
}
cube(3)
x <- 1:10
if(x>5) {
x <- 0
}
f <- function(x) {
g <- function(y){
y+z
}
z <- 4
x +g(x)
}
z <- 10
f(3)
rm(list=ls())
library(swirl)
swirl()
head(flags)
exit()
menu()
library(swirl)
swirl()
dim(flags)
class(flags)
cls_list <l lapply(flags,class)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[1,11:17]
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapple(flag_colors,mean())
sapply(flag_colors,mean
apply(flag_colors,mean)
sapply(flag_colors,mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes,range)
ape_mat <- sapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flag_shapes,unique)
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(unique_vals,unique)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass,mean)
tapply(flags$population, flags$red,summary)
tapply(flags$population, flags$landmass,summary)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
rm(list=ls())
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(c(2,3,4,5,2))
View(makeVector)
w <- c(2,3,4,32)
class(w)
debug(makeVector)
makeVector(w)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
debug(cachemean)
cachemean(w)
?getmean
test <- makeVector(w)
mean_test <- cachemean(test)
matrix_test <- matrix(1:10,2,5)
View(matrix_test)
matrix_test <- matrix(1:9,3,3)
inv_matrix_test <- solve(matrix_test)
?cbind
cbind(c(1,2,3),c(1,2,3))
matrix_test < -cbind(c(1,3,-5),c(0,1,-1),c(-2,-2,9))
matrix_test < cbind(c(1,3,-5),c(0,1,-1),c(-2,-2,9))
matrix_test < cbind(c(1,3,-5),c(0,1,-1))
?rbind
rbind(c(1,3,-5),c(0,1,-1))
cbind(c(1,3,-5),c(0,1,-1))
cbind(c(1,3,-5),c(0,1,-1),c(-2,-2,9))
q <- cbind(c(1,3,-5),c(0,1,-1),c(-2,-2,9))
View(q)
solve(q)
q_inv <- solve(q)
source("makeCacheMatrix.R")
source("week3.R")
setwd("~/Coursera")
source("week3.R")
source("week3.R")
debug(makeCacheMatrix)
makeCacheMatrix(q)
q_mcm <- makeCacheMatrix(q)
source("week3.R")
inv_q_mcm <- invmatrix(q_mcm)
debug(invmatrix)
inv_q_mcm <- invmatrix(q_mcm)
source("week3.R")
debug(invmatrix)
inv_q_mcm <- invmatrix(q_mcm)
inv_q_mcm <- invmatrix(q_mcm)
